/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.30.2
 * source: protos/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace authentication {
    export class CredentialsDto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): CredentialsDto {
            const message = new CredentialsDto({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CredentialsDto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CredentialsDto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CredentialsDto {
            return CredentialsDto.deserialize(bytes);
        }
    }
    export class MingleUserDto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            image?: Uint8Array;
            bio?: string;
            firstname?: string;
            lastname?: string;
            username?: string;
            zip?: string;
            email?: string;
            password?: string;
            phone?: string;
            relationship?: string;
            gender?: string;
            sportType?: string;
            skill?: string;
            birthday?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("bio" in data && data.bio != undefined) {
                    this.bio = data.bio;
                }
                if ("firstname" in data && data.firstname != undefined) {
                    this.firstname = data.firstname;
                }
                if ("lastname" in data && data.lastname != undefined) {
                    this.lastname = data.lastname;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("zip" in data && data.zip != undefined) {
                    this.zip = data.zip;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("phone" in data && data.phone != undefined) {
                    this.phone = data.phone;
                }
                if ("relationship" in data && data.relationship != undefined) {
                    this.relationship = data.relationship;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("sportType" in data && data.sportType != undefined) {
                    this.sportType = data.sportType;
                }
                if ("skill" in data && data.skill != undefined) {
                    this.skill = data.skill;
                }
                if ("birthday" in data && data.birthday != undefined) {
                    this.birthday = data.birthday;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set image(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get bio() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set bio(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get firstname() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set firstname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lastname() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set lastname(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get zip() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set zip(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get phone() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set phone(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get relationship() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set relationship(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set gender(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get sportType() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set sportType(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get skill() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set skill(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get birthday() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set birthday(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            id?: number;
            image?: Uint8Array;
            bio?: string;
            firstname?: string;
            lastname?: string;
            username?: string;
            zip?: string;
            email?: string;
            password?: string;
            phone?: string;
            relationship?: string;
            gender?: string;
            sportType?: string;
            skill?: string;
            birthday?: string;
        }): MingleUserDto {
            const message = new MingleUserDto({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.image != null) {
                message.image = data.image;
            }
            if (data.bio != null) {
                message.bio = data.bio;
            }
            if (data.firstname != null) {
                message.firstname = data.firstname;
            }
            if (data.lastname != null) {
                message.lastname = data.lastname;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.zip != null) {
                message.zip = data.zip;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.phone != null) {
                message.phone = data.phone;
            }
            if (data.relationship != null) {
                message.relationship = data.relationship;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.sportType != null) {
                message.sportType = data.sportType;
            }
            if (data.skill != null) {
                message.skill = data.skill;
            }
            if (data.birthday != null) {
                message.birthday = data.birthday;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                image?: Uint8Array;
                bio?: string;
                firstname?: string;
                lastname?: string;
                username?: string;
                zip?: string;
                email?: string;
                password?: string;
                phone?: string;
                relationship?: string;
                gender?: string;
                sportType?: string;
                skill?: string;
                birthday?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.image != null) {
                data.image = this.image;
            }
            if (this.bio != null) {
                data.bio = this.bio;
            }
            if (this.firstname != null) {
                data.firstname = this.firstname;
            }
            if (this.lastname != null) {
                data.lastname = this.lastname;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.zip != null) {
                data.zip = this.zip;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.phone != null) {
                data.phone = this.phone;
            }
            if (this.relationship != null) {
                data.relationship = this.relationship;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.sportType != null) {
                data.sportType = this.sportType;
            }
            if (this.skill != null) {
                data.skill = this.skill;
            }
            if (this.birthday != null) {
                data.birthday = this.birthday;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.image.length)
                writer.writeBytes(2, this.image);
            if (this.bio.length)
                writer.writeString(3, this.bio);
            if (this.firstname.length)
                writer.writeString(4, this.firstname);
            if (this.lastname.length)
                writer.writeString(5, this.lastname);
            if (this.username.length)
                writer.writeString(6, this.username);
            if (this.zip.length)
                writer.writeString(7, this.zip);
            if (this.email.length)
                writer.writeString(8, this.email);
            if (this.password.length)
                writer.writeString(9, this.password);
            if (this.phone.length)
                writer.writeString(10, this.phone);
            if (this.relationship.length)
                writer.writeString(11, this.relationship);
            if (this.gender.length)
                writer.writeString(12, this.gender);
            if (this.sportType.length)
                writer.writeString(13, this.sportType);
            if (this.skill.length)
                writer.writeString(14, this.skill);
            if (this.birthday.length)
                writer.writeString(15, this.birthday);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MingleUserDto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MingleUserDto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.image = reader.readBytes();
                        break;
                    case 3:
                        message.bio = reader.readString();
                        break;
                    case 4:
                        message.firstname = reader.readString();
                        break;
                    case 5:
                        message.lastname = reader.readString();
                        break;
                    case 6:
                        message.username = reader.readString();
                        break;
                    case 7:
                        message.zip = reader.readString();
                        break;
                    case 8:
                        message.email = reader.readString();
                        break;
                    case 9:
                        message.password = reader.readString();
                        break;
                    case 10:
                        message.phone = reader.readString();
                        break;
                    case 11:
                        message.relationship = reader.readString();
                        break;
                    case 12:
                        message.gender = reader.readString();
                        break;
                    case 13:
                        message.sportType = reader.readString();
                        break;
                    case 14:
                        message.skill = reader.readString();
                        break;
                    case 15:
                        message.birthday = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MingleUserDto {
            return MingleUserDto.deserialize(bytes);
        }
    }
    export class SuccessMsg extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): SuccessMsg {
            const message = new SuccessMsg({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SuccessMsg {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SuccessMsg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SuccessMsg {
            return SuccessMsg.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserGrpcService {
        static definition = {
            login: {
                path: "/authentication.UserGrpc/login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CredentialsDto) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CredentialsDto.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MingleUserDto) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MingleUserDto.deserialize(new Uint8Array(bytes))
            },
            create: {
                path: "/authentication.UserGrpc/create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MingleUserDto) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MingleUserDto.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SuccessMsg) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SuccessMsg.deserialize(new Uint8Array(bytes))
            },
            update: {
                path: "/authentication.UserGrpc/update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MingleUserDto) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MingleUserDto.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SuccessMsg) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SuccessMsg.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract login(call: grpc_1.ServerUnaryCall<CredentialsDto, MingleUserDto>, callback: grpc_1.sendUnaryData<MingleUserDto>): void;
        abstract create(call: grpc_1.ServerUnaryCall<MingleUserDto, SuccessMsg>, callback: grpc_1.sendUnaryData<SuccessMsg>): void;
        abstract update(call: grpc_1.ServerUnaryCall<MingleUserDto, SuccessMsg>, callback: grpc_1.sendUnaryData<SuccessMsg>): void;
    }
    export class UserGrpcClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserGrpcService.definition, "UserGrpc", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        login: GrpcUnaryServiceInterface<CredentialsDto, MingleUserDto> = (message: CredentialsDto, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MingleUserDto>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MingleUserDto>, callback?: grpc_1.requestCallback<MingleUserDto>): grpc_1.ClientUnaryCall => {
            return super.login(message, metadata, options, callback);
        };
        create: GrpcUnaryServiceInterface<MingleUserDto, SuccessMsg> = (message: MingleUserDto, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SuccessMsg>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SuccessMsg>, callback?: grpc_1.requestCallback<SuccessMsg>): grpc_1.ClientUnaryCall => {
            return super.create(message, metadata, options, callback);
        };
        update: GrpcUnaryServiceInterface<MingleUserDto, SuccessMsg> = (message: MingleUserDto, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SuccessMsg>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SuccessMsg>, callback?: grpc_1.requestCallback<SuccessMsg>): grpc_1.ClientUnaryCall => {
            return super.update(message, metadata, options, callback);
        };
    }
}
